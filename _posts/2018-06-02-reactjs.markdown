---
layout:       post
title:        "React Record 1.1"
subtitle:     基于阮一峰 JSTRAINING
date:        2018-06-02 16:48:22+0800
author:       "Kim"
header-img:   "/img/default-bg.jpg"
header-mask:  0.3
catalog:      true
multilingual: false
tags:
    - React
---


<h2 id="1">1. babel.js</h2>

简单的 1v1.

一个ReactDom render绑定一个 dom 元素

 -  试了一下类名的绑定.
	 - 没有效果,  不知是写错了方法还是本身就不支持这种做法.

``` less
  <body>
    <div id="example"></div>
    <div class="example"></div>
    <script type="text/babel">
      ReactDOM.render(
        <span>Hello React!</span>,
        document.getElementById('example')
      );
      ReactDOM.render(
          <span>Hello world!</span>,
          document.getElementsByClassName('example')
      );
    </script>
  </body>
```

<h2 id="2">2. React 组件 [extends React.Component]</h2>

<h3 id="2.1">2.1 基础</h3>

 -  标准的 ES6 Class 写法
 -  这里踩了一个坑.
	 -  类名的名称如果不是大写字母的话, 会没反应.
	 -   类名命名规则本来就是大写开头~哈哈

``` less
<body>
    <div id="example"></div>
    <script type="text/babel">
    class FirstReactComponent extends React.Component{
        render(){
            return <a href="http://www.baidu.com">去百度一下</a>;
        }
    }
    ReactDOM.render(
        <FirstReactComponent/>,
        document.getElementById('example')
    );
    </script>
  </body>
```

<h3 id="2.2">2.2 传值 [this.props]</h3>

 -  ReactDOM.render 组件传入直接传入相应参数,
 -  render 通过 this.props 取得相应的值.

> 样式那边用了双大括号,不知道为什么. 但是从ESLIN的提示来看,

> 应该是由于style里面有着冒号: 所以需要使用双大括号.

> 反观自定义属性 test  ,只需要一对大括号就完事了.

``` less
<body>
    <div id="example"></div>
    <script type="text/babel">
  class MyTitle extends React.Component {
    render() {
      return <h1 style={{color: this.props.color}} data-test={this.props.color}>Hello World</h1>;
    }
  };
  ReactDOM.render(
    <MyTitle color="yellow" />,
    document.getElementById('example')
  );
    </script>
  </body>
```

<h3 id="2.3">2.3 事件,状态 [this.state]</h3>

 -  this.state 对象用来存放内部状态 [可以在构造函数内给属性默认值]
 -  this.setState 用来修改属性
 -  {this.state.name} 用于 render() 取值.
 -  从小程序的绑定方式学到了↓
	 -  将所有 input 表单的 onchange 绑定在桶一个方法.
	 -  然后每个 input 有一个自己的 id 自定义属性. data-id.
	 -  onchange 的时候 读取该字段,拼凑一个 JSON .
	 -  然后 this.setState 直接传入该JSON. [美滋滋]

``` less
 <body>
    <div id="example"></div>
    <script type="text/babel">
  class MyTitle extends React.Component {
    constructor(...args) {
      super(...args);
      this.state = {
        name: '访问者'
      };
    }
    handleChange(e) {
      let name = e.target.value;
      this.setState({
        name: name
      });
    }
    render() {
      return <div>
        <input type="text" onChange={this.handleChange.bind(this)} />
        <p>你好，{this.state.name}</p>
      </div>;
    }
  };
  ReactDOM.render(
    <MyTitle/>,
    document.getElementById('example')
  );
    </script>
  </body>
```

<h3 id="2.4">2.4 生命周期 [this.state]</h3>

componentDidMount 方法在组件加载后执行.[直接跑,根据不同的结果改变相应的内部状态]

 -  以后用 React 接入的方法, 预判断都要做全.

 -  要不然 React 的 Console 异常太烦了.

	 -  元素遍历方式可以说是很有意思了.

	 -  也可以使用正常的数组组成

``` less
let data = this.state.data.items;
let results = [];
data.forEach(dataSon => {
  let item = <li>{dataSon.name}</li>;
    results.push(item);
});
<div>
  <ul>{results}</ul>
```

``` less
 <body>
<div id="example"></div>
<script type="text/babel">
    class MyList extends React.Component {
        constructor(...args) {
            super(...args);
            this.state = {
                loading: true,
                error: null,
                data: null
            };
        }
        componentDidMount() {
            const url = 'https://api.github.com/search/repositories?q=html&sort=stars';
            $.getJSON(url)
                .done(
                    (value) => {
                        console.log(value);
                        if (value.items.length) {
                            this.setState({
                                loading: false,
                                data: value.items
                            });
                        } else {
                            this.setState({
                                loading: false,
                                error: '数据为空'
                            });
                        }
                    }
                ).fail(
                (jqXHR, textStatus) => this.setState({
                    loading: false,
                    error: jqXHR.status
                })
            );
        }

        render() {
            if (this.state.loading) {
                return <span>Loading...</span>;
            } else if (this.state.error !== null) {
                return <span>Error: {this.state.error}</span>;
            } else {
                /*
                 * 这里是网上看了一下 React 遍历的写法.
                 * 很有趣呀~ 哈哈
                  * */
                return (
                    <div>
                        <ul>
                            {
                                this.state.data.map(function (item) {
                                    return (
                                        <li key={item.id}>{item.name}</li>
                                    )
                                })
                            }
                        </ul>
                    </div>
                );
            }
        }
    };

    ReactDOM.render(
        <MyList/>,
        document.getElementById('example')
    );
</script>
</body>
```

